#include <pulsar_scf/helpers/DIIS.hpp>
#include <pulsar/testing/CppTester.hpp>
#include <Eigen/Dense>
#include <libint2/diis.h>
#include<vector>

using matrix=Eigen::MatrixXd;

void fill_f(std::vector<matrix>& input_F)
{
input_F[0]<<-18.8132698579818367, -4.8726876567783748, -0.0000000000000000, -0.0115290261410004, 0.0000000000000000, -0.8067320831879828, -0.8067320831879831,
-4.8726876567783748, -1.7909028757031180, 0.0000000000000001, -0.1808697953459684, 0.0000000000000000, -0.5790558081253416, -0.5790558081253412,
-0.0000000000000000, 0.0000000000000001, 0.1939648957202005, 0.0000000000000001, 0.0000000000000000, -0.1708882966985639, 0.1708882966985641,
-0.0115290261410004, -0.1808697953459684, 0.0000000000000001, 0.2391242202219743, -0.0000000000000000, -0.1828690757991895, -0.1828690757991880,
0.0000000000000000, 0.0000000000000000, 0.0000000000000000, -0.0000000000000000, 0.3091070883885303, 0.0000000000000001, -0.0000000000000001,
-0.8067320831879828, -0.5790558081253416, -0.1708882966985639, -0.1828690757991895, 0.0000000000000001, -0.1450343918427865, -0.1846681692304181,
-0.8067320831879831, -0.5790558081253412, 0.1708882966985641, -0.1828690757991880, -0.0000000000000001, -0.1846681692304181, -0.1450343918427865;
input_F[1]<<-20.6373378351238088, -5.2388627814288542, -0.0000000000000004, -0.0214081047521100, 0.0000000000000000, -0.8649806287491052, -0.8649806287491054,
-5.2388627814288542, -2.6019064381765764, -0.0000000000000015, -0.0443965976566403, -0.0000000000000000, -0.8293548246329223, -0.8293548246329214,
-0.0000000000000004, -0.0000000000000015, -0.3521380585022778, -0.0000000000000037, -0.0000000000000006, -0.3696365139269469, 0.3696365139269424,
-0.0214081047521100, -0.0443965976566403, -0.0000000000000037, -0.3518309091739127, -0.0000000000000001, -0.3331654823427954, -0.3331654823427954,
0.0000000000000000, -0.0000000000000000, -0.0000000000000006, -0.0000000000000001, -0.5960393245157878, 0.0000000000000001, -0.0000000000000001,
-0.8649806287491052, -0.8293548246329223, -0.3696365139269469, -0.3331654823427954, 0.0000000000000001, -0.4537550075197414, -0.2637403153536249,
-0.8649806287491054, -0.8293548246329214, 0.3696365139269424, -0.3331654823427954, -0.0000000000000001, -0.2637403153536249, -0.4537550075197379;
input_F[2]<<-20.1767638434501357, -5.1470558424078741, 0.0000000000000002, -0.0237174540026128, 0.0000000000000000, -0.8509103168452155, -0.8509103168452155,
-5.1470558424078741, -2.3818007491003312, 0.0000000000000013, -0.0832016100498381, 0.0000000000000000, -0.7892241079016737, -0.7892241079016742,
0.0000000000000002, 0.0000000000000013, -0.2244938083766144, 0.0000000000000027, 0.0000000000000001, -0.3529708120539559, 0.3529708120539576,
-0.0237174540026128, -0.0832016100498381, 0.0000000000000027, -0.2323104689547435, 0.0000000000000001, -0.3240156329479502, -0.3240156329479496,
0.0000000000000000, 0.0000000000000000, 0.0000000000000001, 0.0000000000000001, -0.3493794607002405, 0.0000000000000001, 0.0000000000000000,
-0.8509103168452155, -0.7892241079016737, -0.3529708120539559, -0.3240156329479502, 0.0000000000000001, -0.4036389733957622, -0.2519494773248037,
-0.8509103168452155, -0.7892241079016742, 0.3529708120539576, -0.3240156329479496, 0.0000000000000000, -0.2519494773248037, -0.4036389733957639;
input_F[3]<<-20.2464162042657811, -5.1618597674440760, -0.0000000000000005, -0.0253390271173911, -0.0000000000000000, -0.8531167276320295, -0.8531167276320297,
-5.1618597674440760, -2.4086245736334817, -0.0000000000000046, -0.0753481225416795, 0.0000000000000000, -0.7997039028659785, -0.7997039028659754,
-0.0000000000000005, -0.0000000000000046, -0.2383472678457519, -0.0000000000000108, 0.0000000000000002, -0.3575112808799534, 0.3575112808799403,
-0.0253390271173911, -0.0753481225416795, -0.0000000000000108, -0.2643441701065816, 0.0000000000000000, -0.3251603407763737, -0.3251603407763788,
-0.0000000000000000, 0.0000000000000000, 0.0000000000000002, 0.0000000000000000, -0.3839260773579651, -0.0000000000000000, 0.0000000000000000,
-0.8531167276320295, -0.7997039028659785, -0.3575112808799534, -0.3251603407763737, -0.0000000000000000, -0.4166501536254303, -0.2540548435565310,
-0.8531167276320297, -0.7997039028659754, 0.3575112808799403, -0.3251603407763788, 0.0000000000000000, -0.2540548435565310, -0.4166501536254250;
input_F[4]<<-20.2551529893676836, -5.1638270343945223, 0.0000000000000010, -0.0255441309798507, -0.0000000000000000, -0.8533721346226133, -0.8533721346226137,
-5.1638270343945223, -2.4113565098766783, 0.0000000000000072, -0.0743378330386638, 0.0000000000000000, -0.8013389777565001, -0.8013389777565041,
0.0000000000000010, 0.0000000000000072, -0.2366629754399767, 0.0000000000000169, 0.0000000000000002, -0.3579311069870315, 0.3579311069870479,
-0.0255441309798507, -0.0743378330386638, 0.0000000000000169, -0.2724038128916746, 0.0000000000000000, -0.3249754230606838, -0.3249754230606767,
-0.0000000000000000, 0.0000000000000000, 0.0000000000000002, 0.0000000000000000, -0.3880333900992241, -0.0000000000000001, 0.0000000000000001,
-0.8533721346226133, -0.8013389777565001, -0.3579311069870315, -0.3249754230606838, -0.0000000000000001, -0.4183046636618855, -0.2532418745388999,
-0.8533721346226137, -0.8013389777565041, 0.3579311069870479, -0.3249754230606767, 0.0000000000000001, -0.2532418745388999, -0.4183046636618961;
input_F[5]<<-20.2546991407044956, -5.1638003581118390, -0.0000000000000049, -0.0254876572290943, 0.0000000000000000, -0.8533453768278642, -0.8533453768278628,
-5.1638003581118390, -2.4107270226526714, -0.0000000000000328, -0.0743758853172146, -0.0000000000000000, -0.8015451342559561, -0.8015451342559374,
-0.0000000000000049, -0.0000000000000328, -0.2337748682858525, -0.0000000000000796, 0.0000000000000003, -0.3577965582836107, 0.3577965582835276,
-0.0254876572290943, -0.0743758853172146, -0.0000000000000796, -0.2754556106770183, -0.0000000000000001, -0.3246934767928789, -0.3246934767929077,
0.0000000000000000, -0.0000000000000000, 0.0000000000000003, -0.0000000000000001, -0.3876394934405045, -0.0000000000000001, 0.0000000000000000,
-0.8533453768278642, -0.8015451342559561, -0.3577965582836107, -0.3246934767928789, -0.0000000000000001, -0.4182310213234395, -0.2523344538207076,
-0.8533453768278628, -0.8015451342559374, 0.3577965582835276, -0.3246934767929077, 0.0000000000000000, -0.2523344538207076, -0.4182310213233862;
input_F[6]<<-20.2551529893676836, -5.1638270343945223, 0.0000000000000010, -0.0255441309798507, -0.0000000000000000, -0.8533721346226133, -0.8533721346226137,
-5.1638270343945223, -2.4113565098766783, 0.0000000000000072, -0.0743378330386638, 0.0000000000000000, -0.8013389777565001, -0.8013389777565041,
0.0000000000000010, 0.0000000000000072, -0.2366629754399767, 0.0000000000000169, 0.0000000000000002, -0.3579311069870315, 0.3579311069870479,
-0.0255441309798507, -0.0743378330386638, 0.0000000000000169, -0.2724038128916746, 0.0000000000000000, -0.3249754230606838, -0.3249754230606767,
-0.0000000000000000, 0.0000000000000000, 0.0000000000000002, 0.0000000000000000, -0.3880333900992241, -0.0000000000000001, 0.0000000000000001,
-0.8533721346226133, -0.8013389777565001, -0.3579311069870315, -0.3249754230606838, -0.0000000000000001, -0.4183046636618855, -0.2532418745388999,
-0.8533721346226137, -0.8013389777565041, 0.3579311069870479, -0.3249754230606767, 0.0000000000000001, -0.2532418745388999, -0.4183046636618961;
}

void fill_error(std::vector<matrix>& input_error)
{
input_error[0]<<0.0000000000000036, -0.0135593598931587, 0.0000000000000000, -0.0102013782374177, -0.0000000000000000, -0.0646745018776741, -0.0646745018776741,
0.0135593598931605, 0.0000000000000000, 0.0000000000000003, -0.0072338582945901, 0.0000000000000000, 0.1917307979383046, 0.1917307979383039,
-0.0000000000000000, -0.0000000000000003, 0.0000000000000000, -0.0000000000000007, 0.0000000000000001, 0.2279105891274556, -0.2279105891274561,
0.0102013782374177, 0.0072338582945901, 0.0000000000000007, 0.0000000000000000, 0.0000000000000000, 0.1787521380422717, 0.1787521380422699,
0.0000000000000000, -0.0000000000000000, -0.0000000000000001, -0.0000000000000000, 0.0000000000000000, -0.0000000000000001, 0.0000000000000001,
0.0646745018776743, -0.1917307979383043, -0.2279105891274556, -0.1787521380422717, 0.0000000000000001, 0.0000000000000001, -0.0000000000000001,
0.0646745018776737, -0.1917307979383041, 0.2279105891274562, -0.1787521380422700, -0.0000000000000001, 0.0000000000000001, -0.0000000000000001;
input_error[1]<<0.0000000000000036, -0.0011008762211775, 0.0000000000000004, -0.0133452494996356, -0.0000000000000000, 0.0088283082421953, 0.0088283082421917,
0.0011008762211766, 0.0000000000000000, 0.0000000000000006, -0.0248318901416855, -0.0000000000000000, 0.0081143184908627, 0.0081143184908624,
-0.0000000000000004, -0.0000000000000007, 0.0000000000000000, 0.0000000000000016, 0.0000000000000002, -0.1027818879066847, 0.1027818879066874,
0.0133452494996359, 0.0248318901416856, -0.0000000000000016, 0.0000000000000000, -0.0000000000000000, -0.1007706166173674, -0.1007706166173728,
0.0000000000000000, 0.0000000000000000, -0.0000000000000002, 0.0000000000000000, 0.0000000000000000, 0.0000000000000003, -0.0000000000000003,
-0.0088283082421952, -0.0081143184908629, 0.1027818879066847, 0.1007706166173674, -0.0000000000000003, 0.0000000000000001, -0.0000000000000014,
-0.0088283082421918, -0.0081143184908629, -0.1027818879066875, 0.1007706166173727, 0.0000000000000003, 0.0000000000000014, 0.0000000000000000;
input_error[2]<<0.0000000000000000, 0.0003826350288927, 0.0000000000000013, 0.0044120032642499, 0.0000000000000000, -0.0045541909173458, -0.0045541909173427,
-0.0003826350288954, 0.0000000000000000, 0.0000000000000009, -0.0167422436742729, 0.0000000000000000, 0.0187532547853591, 0.0187532547853603,
-0.0000000000000013, -0.0000000000000008, -0.0000000000000001, -0.0000000000000024, 0.0000000000000000, 0.0265430272296572, -0.0265430272296609,
-0.0044120032642505, 0.0167422436742728, 0.0000000000000024, -0.0000000000000001, 0.0000000000000000, 0.0169666830284233, 0.0169666830284268,
-0.0000000000000000, -0.0000000000000000, -0.0000000000000000, -0.0000000000000000, 0.0000000000000001, -0.0000000000000000, -0.0000000000000000,
0.0045541909173459, -0.0187532547853585, -0.0265430272296572, -0.0169666830284235, 0.0000000000000000, 0.0000000000000001, 0.0000000000000022,
0.0045541909173428, -0.0187532547853604, 0.0265430272296609, -0.0169666830284270, 0.0000000000000000, -0.0000000000000021, 0.0000000000000000;
input_error[3]<<0.0000000000000000, 0.0002051399938852, 0.0000000000000040, 0.0012801475740759, 0.0000000000000000, -0.0011876256171068, -0.0011876256171008,
-0.0002051399938905, -0.0000000000000004, -0.0000000000000014, -0.0027771771972052, 0.0000000000000000, 0.0023942174774441, 0.0023942174774422,
-0.0000000000000040, 0.0000000000000013, -0.0000000000000001, 0.0000000000000086, -0.0000000000000001, 0.0059825184517931, -0.0059825184517809,
-0.0012801475740761, 0.0027771771972051, -0.0000000000000087, 0.0000000000000001, 0.0000000000000000, -0.0011372481916516, -0.0011372481916641,
-0.0000000000000000, -0.0000000000000000, 0.0000000000000001, -0.0000000000000000, 0.0000000000000000, -0.0000000000000001, 0.0000000000000001,
0.0011876256171059, -0.0023942174774446, -0.0059825184517930, 0.0011372481916516, 0.0000000000000001, -0.0000000000000002, -0.0000000000000074,
0.0011876256171008, -0.0023942174774422, 0.0059825184517808, 0.0011372481916641, -0.0000000000000001, 0.0000000000000072, 0.0000000000000000;
input_error[4]<<0.0000000000000036, 0.0000038159757692, -0.0000000000000010, 0.0000566058580143, 0.0000000000000000, -0.0000262924752011, -0.0000262924752047,
-0.0000038159757700, -0.0000000000000004, 0.0000000000000026, -0.0004710595058723, 0.0000000000000000, 0.0001087523325428, 0.0001087523325467,
0.0000000000000010, -0.0000000000000027, 0.0000000000000000, -0.0000000000000125, -0.0000000000000001, 0.0014908402312037, -0.0014908402312238,
-0.0000566058580141, 0.0004710595058722, 0.0000000000000125, 0.0000000000000001, 0.0000000000000000, -0.0016324268428523, -0.0016324268428319,
-0.0000000000000000, -0.0000000000000000, 0.0000000000000001, -0.0000000000000000, 0.0000000000000000, -0.0000000000000001, 0.0000000000000001,
0.0000262924752007, -0.0001087523325431, -0.0014908402312037, 0.0016324268428522, 0.0000000000000001, 0.0000000000000000, 0.0000000000000098,
0.0000262924752044, -0.0001087523325470, 0.0014908402312239, 0.0016324268428318, -0.0000000000000001, -0.0000000000000099, 0.0000000000000000;
input_error[5]<<-0.0000000000000036, -0.0000062981212690, 0.0000000000000042, -0.0000297153103508, -0.0000000000000000, 0.0000304585072617, 0.0000304585072668,
0.0000062981212690, 0.0000000000000000, -0.0000000000000120, 0.0000058042655875, -0.0000000000000001, -0.0000242967542200, -0.0000242967542391,
-0.0000000000000041, 0.0000000000000119, -0.0000000000000001, 0.0000000000000618, -0.0000000000000002, 0.0000398735033470, -0.0000398735032534,
0.0000297153103511, -0.0000058042655874, -0.0000000000000618, 0.0000000000000000, -0.0000000000000000, -0.0000865649142019, -0.0000865649142989,
0.0000000000000000, 0.0000000000000001, 0.0000000000000002, 0.0000000000000000, 0.0000000000000001, -0.0000000000000001, 0.0000000000000001,
-0.0000304585072616, 0.0000242967542201, -0.0000398735033470, 0.0000865649142020, 0.0000000000000001, 0.0000000000000000, -0.0000000000000490,
-0.0000304585072668, 0.0000242967542392, 0.0000398735032534, 0.0000865649142989, -0.0000000000000001, 0.0000000000000491, 0.0000000000000000;
input_error[6]<<-0.0000000000000036, 0.0000000339282726, -0.0000000000000083, 0.0000001243636465, 0.0000000000000000, -0.0000001368757236, -0.0000001368757376,
-0.0000000339282735, 0.0000000000000000, 0.0000000000000279, 0.0000004098818070, 0.0000000000000001, -0.0000002063461718, -0.0000002063461283,
0.0000000000000083, -0.0000000000000279, 0.0000000000000001, -0.0000000000001348, -0.0000000000000003, 0.0000004320221989, -0.0000004320224049,
-0.0000001243636466, -0.0000004098818070, 0.0000000000001348, 0.0000000000000001, 0.0000000000000000, 0.0000008972135189, 0.0000008972137307,
-0.0000000000000000, -0.0000000000000001, 0.0000000000000003, -0.0000000000000000, 0.0000000000000000, -0.0000000000000003, 0.0000000000000002,
0.0000001368757235, 0.0000002063461717, -0.0000004320221988, -0.0000008972135189, 0.0000000000000003, 0.0000000000000000, 0.0000000000001077,
0.0000001368757373, 0.0000002063461283, 0.0000004320224050, -0.0000008972137306, -0.0000000000000002, -0.0000000000001077, 0.0000000000000000;
}

TEST_SIMPLE(TestDIIS){
    pulsar::CppTester tester("Testing DIIS");
    std::vector<matrix> input_F(7,matrix(7,7)),input_error(7,matrix(7,7));
    fill_f(input_F);
    fill_error(input_error);
    pulsar_scf::DIIS<matrix> diis(input_F[0],input_error[0]);
    libint2::DIIS<matrix> corr_diis;
    matrix tempF=input_F[0];
    matrix tempError=input_error[0];
    corr_diis.extrapolate(tempF,tempError);
    for(size_t i=1;i<input_F.size();++i)
    {
        tempF=input_F[i];
        tempError=input_error[i];
        corr_diis.extrapolate(tempF,tempError);
        auto newF=diis.update(input_F[i],input_error[i]);
        std::cout<<"***********************************************"<<std::endl;
        std::cout<<(tempF-newF).eval()<<std::endl;
        std::cout<<"***********************************************"<<std::endl;
    }
    return tester.nfailed();
}
