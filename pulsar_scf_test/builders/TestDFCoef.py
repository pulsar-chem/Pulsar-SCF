import pulsar as psr
import os,sys
sys.path.insert(0,os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
corr_ints=[2.0222080644043485 ,0.36987376163212604 ,1.7850044817383496e-17 ,0.0 ,0.0 ,0.06031130014962195 ,0.06031130014962195 ,0.3698737616321261 ,0.6880699277230037 ,-1.2188450702650387e-17 ,0.0 ,0.0 ,0.1953020171135259 ,0.1953020171135259 ,1.7850044817383496e-17 ,-1.2188450702650387e-17 ,0.6880961673192157 ,0.0 ,0.0 ,0.09048077230838268 ,0.09048077230838268 ,0.0 ,0.0 ,0.0 ,0.6880961673192155 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.6880961673192157 ,0.11580945652825361 ,-0.11580945652825361 ,0.06031130014962195 ,0.1953020171135259 ,0.09048077230838268 ,0.0 ,0.11580945652825361 ,0.29814056598656496 ,0.0666249438292437 ,0.06031130014962195 ,0.1953020171135259 ,0.09048077230838268 ,0.0 ,-0.11580945652825361 ,0.0666249438292437 ,0.29814056598656496 ,-0.3596205464209228 ,0.002651738357320521 ,2.7514563372068518e-18 ,0.0 ,0.0 ,0.0001550172420761789 ,0.0001550172420761789 ,0.00265173835732041 ,0.5557326887499007 ,-6.108204708236765e-18 ,0.0 ,0.0 ,0.2205474476263449 ,0.2205474476263449 ,2.7514563372068518e-18 ,-6.108204708236765e-18 ,0.5553415758529691 ,0.0 ,0.0 ,0.12075030749159978 ,0.12075030749159978 ,0.0 ,0.0 ,0.0 ,0.5553415758529688 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.5553415758529691 ,0.15455247705623437 ,-0.15455247705623437 ,0.0001550172420761789 ,0.22054744762634484 ,0.12075030749159978 ,0.0 ,0.15455247705623437 ,0.5065615886119672 ,0.09688141217003692 ,0.0001550172420761789 ,0.22054744762634484 ,0.12075030749159978 ,0.0 ,-0.15455247705623437 ,0.09688141217003692 ,0.5065615886119672 ,-6.720158552089302e-18 ,6.674924325726566e-19 ,0.05999929768542085 ,0.0 ,0.0 ,0.0019358291541308945 ,0.0019358291541308945 ,6.674924325726539e-19 ,6.8717485207701564e-18 ,0.3858070096404519 ,0.0 ,0.0 ,0.07169279733828961 ,0.07169279733828961 ,0.05999929768542085 ,0.3858070096404519 ,1.2272099716899742e-17 ,0.0 ,0.0 ,0.14206877756527517 ,0.14206877756527517 ,0.0 ,0.0 ,0.0 ,1.2934423778247356e-17 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,1.2934423778247362e-17 ,0.04552396784913163 ,-0.04552396784913163 ,0.0019358291541308945 ,0.0716927973382896 ,0.14206877756527517 ,0.0 ,0.04552396784913163 ,0.2417200033382098 ,0.0524420958026338 ,0.0019358291541308945 ,0.0716927973382896 ,0.14206877756527517 ,0.0 ,-0.04552396784913163 ,0.0524420958026338 ,0.2417200033382098 ,0.0 ,0.0 ,0.0 ,0.05999929768542084 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.3858070096404518 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,-3.311620306738097e-19 ,0.0 ,0.0 ,0.0 ,0.05999929768542084 ,0.3858070096404518 ,-3.311620306738097e-19 ,0.0 ,0.0 ,0.10650135593139068 ,0.10650135593139068 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.10650135593139068 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.10650135593139068 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.05999929768542085 ,0.0024777344020380085 ,-0.0024777344020380085 ,0.0 ,0.0 ,0.0 ,0.0 ,0.3858070096404519 ,0.09176208032840073 ,-0.09176208032840073 ,0.0 ,0.0 ,0.0 ,0.0 ,-3.311620306738098e-19 ,0.04552396784913163 ,-0.04552396784913163 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.05999929768542085 ,0.3858070096404519 ,-3.311620306738098e-19 ,0.0 ,0.0 ,0.16476905017308965 ,0.16476905017308965 ,0.002477734402038009 ,0.09176208032840075 ,0.04552396784913163 ,0.0 ,0.16476905017308965 ,0.30938575682352176 ,2.885002236080519e-18 ,-0.002477734402038009 ,-0.09176208032840075 ,-0.04552396784913163 ,0.0 ,0.16476905017308965 ,-2.885002236080519e-18 ,-0.30938575682352176 ,0.13592282357780183 ,-0.0011430477459906663 ,-0.015072619491529252 ,0.0 ,-0.019291964770391835 ,-0.001252736604869499 ,0.00023147966353600363 ,-0.0011430477459905553 ,-0.09524000407285094 ,-0.04855088842414622 ,0.0 ,-0.06214195412922377 ,0.013549967517838879 ,-0.014192389824949303 ,-0.015072619491529252 ,-0.04855088842414622 ,-0.09241370793065773 ,0.0 ,0.02834055657516054 ,0.024466245100950523 ,-0.01624222527668312 ,0.0 ,0.0 ,0.0 ,-0.1145559018709632 ,0.0 ,0.0 ,0.0 ,-0.019291964770391835 ,-0.06214195412922377 ,0.02834055657516054 ,0.0 ,-0.07828184749517497 ,0.03131518969324293 ,-0.003914537257960066 ,-0.001252736604869513 ,0.01354996751783899 ,0.024466245100950523 ,0.0 ,0.03131518969324293 ,0.4208492761946445 ,0.02065253197541589 ,0.00023147966353600363 ,-0.014192389824949081 ,-0.01624222527668312 ,0.0 ,-0.003914537257960066 ,0.02065253197541589 ,0.04112535307311582 ,0.10169968533695806 ,-0.0008552470661841172 ,-0.01127758105035844 ,0.0 ,0.025783937435666832 ,0.0006097756403930926 ,-0.0013738968295203477 ,-0.0008552470661841172 ,-0.07126013270431697 ,-0.03632657081126023 ,0.0 ,0.08305345134452269 ,-0.018779328617243407 ,0.0182986577132197 ,-0.01127758105035844 ,-0.03632657081126023 ,-0.06914545158775232 ,0.0 ,-0.03787748662839144 ,-0.024127001081556465 ,0.030280347563901466 ,0.0 ,0.0 ,0.0 ,-0.08571260416099191 ,0.0 ,0.0 ,0.0 ,0.025783937435666832 ,0.08305345134452269 ,-0.03787748662839144 ,0.0 ,-0.05857176188881996 ,-0.005130917170102833 ,-0.031490376539290266 ,0.0006097756403930926 ,-0.01877932861724324 ,-0.024127001081556465 ,0.0 ,-0.005130917170102833 ,-0.08092424459975067 ,0.015452563065017716 ,-0.0013738968295203546 ,0.018298657713219812 ,0.030280347563901466 ,0.0 ,-0.031490376539290266 ,0.015452563065017716 ,0.4265812372482034
]


def run(mm):
    tester = psr.PyTester("Testing Building of the DF coefficients")
    wf=psr.make_wf("sto-3g","""
    O 0.0 -0.07579 0.0
    H 0.86681 0.60144 0.0
    H -0.86681 0.60144 0.0
    """)
    mm.load_supermodule("pulsar_libint")
    mm.load_supermodule("pulsar_scf")
    mm.change_option("PSR_3C2E","DF_INTS_KEY","LIBINT_3C2E")
    mm.change_option("PSR_Metric","METRIC_INTS_KEY","LIBINT_Metric")
    bs=wf.system.get_basis_set("PRIMARY")
    dfcoef=mm.get_module("PSR_DFCoef",0)
    ints=dfcoef.calculate("???",0,wf,bs,bs,bs)[0]
    dims=ints.sizes()
    flat_ints=[]
    for i in range(dims[0]):
        for j in range(dims[1]):
            for k in range(dims[2]):
                flat_ints.append(ints.get_value([i,j,k]))
    tester.test_double_vector("d^Q_{mn}",flat_ints,corr_ints)
    dfcoef.options().change("FORCE_CACHE",True)
    ints=dfcoef.calculate("???",0,wf,bs,bs,bs)[0]
    dims=ints.sizes()
    flat_ints=[]
    for i in range(dims[0]):
        for j in range(dims[1]):
            for k in range(dims[2]):
                flat_ints.append(ints.get_value([i,j,k]))
    tester.test_double_vector("Cacheing d^Q_{mn} works",flat_ints,corr_ints)
    tester.print_results()
    return tester.nfailed()

def run_test():
    with psr.ModuleAdministrator() as mm:
        return run(mm)
