import pulsar as psr
import numpy as np
import os,sys
sys.path.insert(0,os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from pulsar_scf_test.TestCommon import make_wf
corr_ints=[2.06862800666547 ,0.37836424238981425 ,1.8259793974439417e-17 ,0.0 ,0.0 ,0.06169575070143164 ,0.06169575070143164 ,0.3783642423898143 ,0.7038646260424982 ,-1.2468237529648433e-17 ,0.0 ,0.0 ,0.19978518999641162 ,0.19978518999641162 ,1.8259793974439417e-17 ,-1.2468237529648433e-17 ,0.7038914679706674 ,0.0 ,0.0 ,0.09255776542310154 ,0.09255776542310154 ,0.0 ,0.0 ,0.0 ,0.7038914679706672 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.7038914679706674 ,0.11846787154496796 ,-0.11846787154496796 ,0.06169575070143164 ,0.19978518999641162 ,0.09255776542310154 ,0.0 ,0.11846787154496796 ,0.30498440569940427 ,0.06815432455922062 ,0.06169575070143164 ,0.19978518999641162 ,0.09255776542310154 ,0.0 ,-0.11846787154496796 ,0.06815432455922062 ,0.30498440569940427 ,5.376993110842381 ,1.25024634719759 ,7.056411027231729e-17 ,0.0 ,0.0 ,0.20278278774726188 ,0.20278278774726188 ,1.2502463471975898 ,4.473059153366763 ,-6.467104479143973e-17 ,0.0 ,0.0 ,1.5144868160537643 ,1.5144868160537643 ,7.056411027231729e-17 ,-6.467104479143973e-17 ,4.471622393844846 ,0.0 ,0.0 ,0.774049086256692 ,0.774049086256692 ,0.0 ,0.0 ,0.0 ,4.471622393844844 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,4.471622393844846 ,0.9907320828347286 ,-0.9907320828347286 ,0.20278278774726188 ,1.5144868160537641 ,0.774049086256692 ,0.0 ,0.9907320828347286 ,2.9742295795267686 ,0.601027513383642 ,0.20278278774726188 ,1.5144868160537641 ,0.774049086256692 ,0.0 ,-0.9907320828347286 ,0.601027513383642 ,2.9742295795267686 ,1.4863612639233585e-17 ,3.756267157770595e-18 ,0.1443079508713637 ,0.0 ,0.0 ,0.004655980140540127 ,0.004655980140540127 ,3.756267157770596e-18 ,-7.837798232158131e-18 ,0.9279278448379317 ,0.0 ,0.0 ,0.17243269630201774 ,0.17243269630201774 ,0.1443079508713637 ,0.9279278448379317 ,5.171218959215519e-18 ,0.0 ,0.0 ,0.34169823588161924 ,0.34169823588161924 ,0.0 ,0.0 ,0.0 ,6.764214740716119e-18 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,6.7642147407161224e-18 ,0.10949245689984692 ,-0.10949245689984692 ,0.004655980140540127 ,0.1724326963020177 ,0.34169823588161924 ,0.0 ,0.10949245689984692 ,0.5813754445801156 ,0.1261316661464309 ,0.004655980140540127 ,0.1724326963020177 ,0.34169823588161924 ,0.0 ,-0.10949245689984692 ,0.1261316661464309 ,0.5813754445801156 ,0.0 ,0.0 ,0.0 ,0.14430795087136364 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.9279278448379312 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,-7.964978907503015e-19 ,0.0 ,0.0 ,0.0 ,0.14430795087136364 ,0.9279278448379312 ,-7.964978907503015e-19 ,0.0 ,0.0 ,0.25615287232295775 ,0.25615287232295775 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.25615287232295775 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.25615287232295775 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.1443079508713637 ,0.0059593493283250695 ,-0.0059593493283250695 ,0.0 ,0.0 ,0.0 ,0.0 ,0.9279278448379317 ,0.22070254637501593 ,-0.22070254637501593 ,0.0 ,0.0 ,0.0 ,0.0 ,-7.964978907503019e-19 ,0.10949245689984692 ,-0.10949245689984692 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.0 ,0.1443079508713637 ,0.9279278448379317 ,-7.964978907503019e-19 ,0.0 ,0.0 ,0.396296038699752 ,0.396296038699752 ,0.00595934932832507 ,0.22070254637501596 ,0.10949245689984692 ,0.0 ,0.396296038699752 ,0.7441224534006025 ,6.93889390390723e-18 ,-0.00595934932832507 ,-0.22070254637501596 ,-0.10949245689984692 ,0.0 ,0.396296038699752 ,-6.93889390390723e-18 ,-0.7441224534006025 ,4.028102964061444 ,0.9498249088968483 ,0.03465789737188192 ,0.0 ,0.04435983642325494 ,0.15731444451052312 ,0.15330687900748052 ,0.9498249088968482 ,3.847940367964557 ,0.37520896110429613 ,0.0 ,0.4802428710701164 ,1.7496881179010069 ,1.3407507032149342 ,0.03465789737188192 ,0.37520896110429613 ,3.855223496512448 ,0.0 ,0.08926679439738265 ,1.1022501338413964 ,0.8145008614999972 ,0.0 ,0.0 ,0.0 ,3.7854802411626696 ,0.0 ,0.0 ,0.0 ,0.04435983642325494 ,0.4802428710701164 ,0.08926679439738265 ,0.0 ,3.8997358855546738 ,1.410807906494191 ,-0.7471140639167979 ,0.1573144445105231 ,1.7496881179010069 ,1.1022501338413964 ,0.0 ,1.410807906494191 ,5.141453839569212 ,0.724138392468327 ,0.15330687900748052 ,1.3407507032149344 ,0.8145008614999972 ,0.0 ,-0.7471140639167979 ,0.724138392468327 ,2.8612465365332045 ,4.028102964061444 ,0.9498249088968483 ,0.03465789737188192 ,0.0 ,-0.04435983642325494 ,0.15330687900748052 ,0.15731444451052312 ,0.9498249088968482 ,3.847940367964557 ,0.37520896110429613 ,0.0 ,-0.4802428710701164 ,1.3407507032149342 ,1.7496881179010069 ,0.03465789737188192 ,0.37520896110429613 ,3.855223496512448 ,0.0 ,-0.08926679439738265 ,0.8145008614999972 ,1.1022501338413964 ,0.0 ,0.0 ,0.0 ,3.7854802411626696 ,0.0 ,0.0 ,0.0 ,-0.04435983642325494 ,-0.4802428710701164 ,-0.08926679439738265 ,0.0 ,3.8997358855546738 ,0.7471140639167979 ,-1.410807906494191 ,0.15330687900748052 ,1.3407507032149344 ,0.8145008614999972 ,0.0 ,0.7471140639167979 ,2.8612465365332045 ,0.724138392468327 ,0.1573144445105231 ,1.7496881179010069 ,1.1022501338413964 ,0.0 ,-1.410807906494191 ,0.724138392468327 ,5.141453839569212
]


def run(mm):
    tester = psr.PyTester("Testing Building of the 2 electron, 3 center integrals")
    wf=psr.make_wf("sto-3g","""
    O 0.0 -0.07579 0.0
    H 0.86681 0.60144 0.0
    H -0.86681 0.60144 0.0
    """)
    mm.load_supermodule("pulsar_libint")
    mm.load_supermodule("pulsar_scf")
    mm.change_option("PSR_3C2E","DF_INTS_KEY","LIBINT_3C2E")
    bs=wf.system.get_basis_set("PRIMARY")
    da_builder=mm.get_module("PSR_3C2E",0)
    ints=da_builder.calculate("???",0,wf,bs,bs,bs)[0]
    dims=ints.sizes()
    flat_ints=[]
    for i in range(dims[0]):
        for j in range(dims[1]):
            for k in range(dims[2]):
                flat_ints.append(ints.get_value([i,j,k]))
    tester.test_double_vector("3 center, 2 e matrix",flat_ints,corr_ints)
    da_builder.options().change("FORCE_CACHE",True)
    ints=da_builder.calculate("???",0,wf,bs,bs,bs)[0]
    dims=ints.sizes()
    flat_ints=[]
    for i in range(dims[0]):
        for j in range(dims[1]):
            for k in range(dims[2]):
                flat_ints.append(ints.get_value([i,j,k]))
    tester.test_double_vector("Cache 3 center, 2 e matrix",flat_ints,corr_ints)
    tester.print_results()
    return tester.nfailed()

def run_test():
    with psr.ModuleAdministrator() as mm:
        return run(mm)
